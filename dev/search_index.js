var documenterSearchIndex = {"docs":
[{"location":"graphs/#Approximate-*k*-Nearest-Neighbor-Graphs-1","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"","category":"section"},{"location":"graphs/#","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"The index structure built by NNDescent is an approximate k-NN graph.","category":"page"},{"location":"graphs/#","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"Definition: An approximate k-nearest neighbor graph is a weighted, directed graph G = {V, E, k}, where V is a non-empty set of nodes, E is a set of weighted directed edges (p, q, w), and k is a positive integer, with the following properties:","category":"page"},{"location":"graphs/#","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"| V | >  k\nEvery node v in V has exactly k outgoing edges, with no self-loops.","category":"page"},{"location":"graphs/#","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"Note this implies that | E | = | V | * k. The edges (p, q) in E denote that q is an approximate (or candidate) nearest neighbor of p in V.","category":"page"},{"location":"graphs/#","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"For the types in this package, the set of nodes is immutable but the set of outgoing edges for each node can be updated such that the sum of all outgoing edge weights never increases (with add_edge!).","category":"page"},{"location":"graphs/#Types-1","page":"Approximate k-Nearest Neighbor Graphs","title":"Types","text":"","category":"section"},{"location":"graphs/#","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"ApproximateKNNGraph <: AbstractGraph: An abstract type whose subtypes all have the properties of approximate knn graphs","category":"page"},{"location":"graphs/#","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"HeapKNNGraph <: ApproximateKNNGraph: A knn graph where each node's outgoing edges are stored in a max heap","category":"page"},{"location":"graphs/#","page":"Approximate k-Nearest Neighbor Graphs","title":"Approximate k-Nearest Neighbor Graphs","text":"ThreadSafeHeapKNNGraph: A thread-safe version of HeapKNNGraph. This is mostly for demonstration purposes, as (at writing) little or no speedup is observed when using this struct with multiple threads.","category":"page"},{"location":"ref/public/#Public-Interface-1","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"ref/public/#","page":"Public","title":"Public","text":"Documentation for NearestNeighborDescent.jl's public interface.","category":"page"},{"location":"ref/public/#Contents-1","page":"Public","title":"Contents","text":"","category":"section"},{"location":"ref/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"ref/public/#Index-1","page":"Public","title":"Index","text":"","category":"section"},{"location":"ref/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"ref/public/#Public-Interface-2","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"ref/public/#","page":"Public","title":"Public","text":"nndescent\nsearch\nlocal_join!","category":"page"},{"location":"ref/public/#NearestNeighborDescent.nndescent","page":"Public","title":"NearestNeighborDescent.nndescent","text":"nndescent(GraphT::Type{ApproximateKNNGraph}, data, n_neighbors, metric; kwargs...)\n\nFind the approximate neighbors of each point in data by  iteratively refining a KNN graph of type GraphT. Returns the final KNN graph.\n\nKeyword Arguments\n\nmax_iters = 10: Limits the number of iterations to refine candidate\n\nnearest neighbors. Higher values trade off speed for accuracy. Note that graph construction may terminate early if little progress is being made.\n\nsample_rate = 1: The sample rate for calculating local joins\n\naround each point. Lower values trade off accuracy for speed.\n\nprecision = 1e-3: The threshold for early termination,\n\nwhere precision is \"roughly the fraction of true kNN allowed to be missed due to early termination\". Lower values take longer but return more accurate results.\n\n\n\n\n\nnndescent(::Type{<:ApproximateKNNGraph}, data::AbstractMatrix, n_neighbors::Integer, metric::PreMetric; kwargs...)\n\n\n\n\n\nnndescent(data, n_neighbors, metric; kwargs...)\n\nDo nndescent using HeapKNNGraph as the KNN Graph type.\n\n\n\n\n\n","category":"function"},{"location":"ref/public/#NearestNeighborDescent.search","page":"Public","title":"NearestNeighborDescent.search","text":"search(graph, queries, n_neighbors; max_candidates) -> indices, distances\n\nSearch the kNN graph for the nearest neighbors of the points in queries. max_candidates controls how large the candidate queue should be (min n_neighbors); larger values increase accuracy at the cost of speed.\n\n\n\n\n\n","category":"function"},{"location":"ref/public/#NearestNeighborDescent.local_join!","page":"Public","title":"NearestNeighborDescent.local_join!","text":"local_join!(graph; kwargs...)\n\nPerform a local join on each vertex v's neighborhood N[v] in graph. Given vertex v and its neighbors N[v], compute the similarity graph.metric(p, q) for each pair p, q âˆˆ N[v] and update N[q] and N[p].\n\nThis mutates graph in-place and returns a nonnegative integer indicating how many neighbor updates took place during the local join.\n\n\n\n\n\n","category":"function"},{"location":"ref/public/#KNN-Graphs-Public-Interface-1","page":"Public","title":"KNN Graphs Public Interface","text":"","category":"section"},{"location":"ref/public/#","page":"Public","title":"Public","text":"ApproximateKNNGraph\nHeapKNNGraph\nLockHeapKNNGraph\nknn_diameter\nknn_matrices\nflag\nweight\nedge_indices\nnode_edge\nnode_edges\nupdate_flag!","category":"page"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.ApproximateKNNGraph","page":"Public","title":"NearestNeighborDescent.KNNGraphs.ApproximateKNNGraph","text":"ApproximateKNNGraph{V, U, D, M} subtypes are weighted, directed graphs where each vertex has exactly k forward edges with weights of type U.\n\nD is the type of the dataset corresponding to this graph, and M is a Distances.PreMetric with result type matching U.\n\n\n\n\n\n","category":"type"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.HeapKNNGraph","page":"Public","title":"NearestNeighborDescent.KNNGraphs.HeapKNNGraph","text":"HeapKNNGraph{V, U, D, M}\n\nA weighted, directed graph representing an approximate k-nearest neighbors graph using binary max heaps to store each vertex's forward edges, allowing for efficient updates of the candidate neighbors.\n\n\n\n\n\n","category":"type"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.LockHeapKNNGraph","page":"Public","title":"NearestNeighborDescent.KNNGraphs.LockHeapKNNGraph","text":"LockHeapKNNGraph - uses locks to synchronize the heaps that store the underlying graph edge data. The heaps themselves are not thread-safe.\n\n\n\n\n\n","category":"type"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.knn_diameter","page":"Public","title":"NearestNeighborDescent.KNNGraphs.knn_diameter","text":"knn_diameter(g::ApproximateKNNGraph{V}, v::V)\n\nCompute the diameter of the ball centered on v that covers all of vs approximate k-nearest neighbors.\n\n\n\n\n\nknn_diameter(graph, v) -> diameter\n\nReturn the diameter of the set of KNNs of vertex v.\n\n\n\n\n\n","category":"function"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.knn_matrices","page":"Public","title":"NearestNeighborDescent.KNNGraphs.knn_matrices","text":"knn_matrices(graph) -> indices, distances\n\nReturn the indices and distances of the approximate KNNs as dense matrices where indices[j, i] and distances[j, i] are the index of and distance to node i's jth nearest neighbor, respectively.\n\n\n\n\n\n","category":"function"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.edge_indices","page":"Public","title":"NearestNeighborDescent.KNNGraphs.edge_indices","text":"edge_indices(graph) -> CartesianIndices\n\nReturn the indices of the KNNs for each node v as tuples (v, i). To be used with node_edge(graph, v, i).\n\n\n\n\n\n","category":"function"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.node_edge","page":"Public","title":"NearestNeighborDescent.KNNGraphs.node_edge","text":"node_edge(graph, v, i) -> edge\n\nReturn the ith outgoing edge from node v. No ordering of the edges is guaranteed; in particular, node_edge(graph, v, 1) is not guaranteed to be the edge to v's nearest neighbor.\n\n\n\n\n\n","category":"function"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.node_edges","page":"Public","title":"NearestNeighborDescent.KNNGraphs.node_edges","text":"node_edges(graph::LockHeapKNNGraph, i) -> edges\n\nReturn all the outgoing edges from node i in an arbitrary order. Thread-safe.\n\n\n\n\n\nnode_edges(graph, v) -> edges\n\nReturn all the outgoing edges from node v in an arbitrary order.\n\n\n\n\n\n","category":"function"},{"location":"ref/public/#NearestNeighborDescent.KNNGraphs.update_flag!","page":"Public","title":"NearestNeighborDescent.KNNGraphs.update_flag!","text":"update_flag!(g::LockHeapKNNGraph, i, j, flag)\n\nUpdate the flag of the edge at the given indices. Since the flags don't influence the edge ordering, this can't invalidate the heap invariant. Uses locks to ensure thread safety.\n\n\n\n\n\nupdate_flag!(graph, v, i, new_flag)\n\nUpdate the flag of node vs ith outgoing edge. Returns the new edge. Note that since the flags don't influence the edge ordering, this can't invalidate the heap invariant.\n\n\n\n\n\n","category":"function"},{"location":"basic/#Usage-1","page":"Basic Usage","title":"Usage","text":"","category":"section"},{"location":"basic/#Graph-Construction-1","page":"Basic Usage","title":"Graph Construction","text":"","category":"section"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"nndescent builds the approximate kNN graph:","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"nndescent(data, n_neighbors, metric; max_iters, sample_rate, precision) -> graph","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"data: The set of points to build the graph from. This must either be a vector of points AbstractVector{V} or an AbstractMatrix. In the matrix case, each column is assumed to be a point.\nn_neighbors: A positive integer specifying the number of neighbors to find. As the quality of the approximate neighbors returned depends on this parameter, this should probably never be less than 5.\nmetric: Any subtype of the PreMetric abstract type from Distances.jl, including user-defined subtypes.","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"The behavior of NNDescent can be tuned with several keyword arguments.","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"max_iters: This controls the maximum number of iterations to search for neighbors. Default is 10.\nsample_rate: Controls how many candidate neighbors are evaluated each iteration. Lower values result in fewer distance calculations per iteration, trading off accuracy for speed. Must be a value in (0, 1]; default is 1.\nprecision: Execution will terminate early (i.e. before max_iters is reached) if the proportion of edges updated after an iteration is less than this value. Default .001.","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"The k-nearest neighbors can be accessed with","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"knn_matrices(graph) -> indices, distances","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"The indices and distances are both KxN matrices containing ids and distances to each point's neighbors, respectively, where K = n_neighbors and N is the number of points in the dataset.","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"Example:","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"using NearestNeighborDescent\ndata = [rand(10) for _ in 1:1000]\n# OR data = rand(10, 1000)\n\n# nn descent search\ngraph = nndescent(data, 10, Euclidean())\n\n# access point i's jth nearest neighbor:\nindices, distances = knn_matrices(graph)\nindices[j, i]\ndistances[j, i]","category":"page"},{"location":"basic/#Querying-1","page":"Basic Usage","title":"Querying","text":"","category":"section"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"Once constructed, the ApproximateKNNGraph can be used to find the nearest neighbors to new points. This is done via the search method:","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"search(graph, queries, n_neighbors; max_candidates) -> indices, distances","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"graph: An instance of ApproximateKNNGraph\nqueries: A vector of new data points of type Vector{V} or AbstractMatrix. Note that the type of the query points must be compatible with the original dataset points.\nn_neighbors: The number of neighbors to find for each query. This does not have to be the same as the number used to construct graph.\nmax_candidates: Each query maintains a heap of candidate neighbors - the maximum size of that heap is controlled with this keyword arg (default max(n_neighbors, 20)).","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"This will automatically use all available threads for the search. Similar to knn_matrices, this returns two matrices for the indices and distances to the nearest neighbors of each query.","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"Example:","category":"page"},{"location":"basic/#","page":"Basic Usage","title":"Basic Usage","text":"queries = [rand(10) for _ in 1:100]\n# OR queries = rand(10, 100)\nindices, distances = search(graph, queries, 5)","category":"page"},{"location":"#NearestNeighborDescent.jl-Documentation-1","page":"Home","title":"NearestNeighborDescent.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"}]
}
